digraph "" {
Bits[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Bits</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _getBit(uint256,uint256)</TD></TR><TR><TD align="left">    _toggleBit(uint256,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    s</TD></TR></TABLE> >];

ModifiersARB -> Bits;
ModifiersARB[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ModifiersARB</B></TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    noReentrancy(uint256)</TD></TR><TR><TD align="left">    isAuthorized(uint256)</TD></TR><TR><TD align="left">    onlyWhenEnabled()</TD></TR><TR><TD align="left">    filterDetails(IStorageBeacon.AccountConfig)</TD></TR></TABLE> >];

StorageBeacon -> IStorageBeacon [ label="1" ];
StorageBeacon -> Initializable [ label="2" ];
StorageBeacon -> Ownable [ label="3" ];
StorageBeacon[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>StorageBeacon</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    saveUserToDetails(address,IStorageBeacon.AccountConfig)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    saveTaskId(address,bytes32)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    changeGasPriceBid(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    addTokenToDatabase(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    removeTokenFromDatabase(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    storeBeacon(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    changeEmergencyMode(IStorageBeacon.EmergencyMode)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    changeEmitterStatus(bool)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    storeAccountPayment(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    addAuthorizedSelector(bytes4)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    isSelectorAuthorized(bytes4)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getFixedConfig()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getGasPriceBid()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getEmergencyMode()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getAccountsByUser(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getTaskID(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getUserByAccount(address)</font></TD></TR><TR><TD align="left">    queryTokenDatabase(address)</TD></TR><TR><TD align="left"><font color="#FFA500">    isUser(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getEmitterStatus()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getTokenDatabase()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getAccountPayments(address)</font></TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    hasRole(bytes4)</TD></TR><TR><TD align="left">    onlyAccount()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    accountToDetails</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    fxConfig</TD></TR><TR><TD align="left">    eMode</TD></TR><TR><TD align="left">    taskIDs</TD></TR><TR><TD align="left">    tokenDatabase</TD></TR><TR><TD align="left">    userDatabase</TD></TR><TR><TD align="left">    userToAccounts</TD></TR><TR><TD align="left">    authorizedSelectors</TD></TR><TR><TD align="left">    accountToPayments</TD></TR><TR><TD align="left">    tokenDatabaseArray</TD></TR><TR><TD align="left">    gasPriceBid</TD></TR><TR><TD align="left">    beacon<font color="blue" POINT-SIZE="10"> (ozUpgradeableBeacon)</font></TD></TR><TR><TD align="left">    isEmitter</TD></TR></TABLE> >];

ozUpgradeableBeacon -> ozIUpgradeableBeacon [ label="1" ];
ozUpgradeableBeacon -> UpgradeableBeacon [ label="2" ];
ozUpgradeableBeacon[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ozUpgradeableBeacon</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    storageBeacon(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    upgradeStorageBeacon(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    setAuth(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    canCall(address,address,bytes4)</font></TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _storageBeacons</TD></TR><TR><TD align="left">    auth<font color="blue" POINT-SIZE="10"> (RolesAuthority)</font></TD></TR></TABLE> >];

IMulCurv[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IMulCurv</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    exchange(int128,int128,uint256,uint256)</TD></TR><TR><TD align="left">    exchange_underlying(int128,int128,uint256,uint256)</TD></TR><TR><TD align="left">    get_dy(int128,int128,uint256)</TD></TR><TR><TD align="left">    get_dy_underlying(int128,int128,uint256)</TD></TR><TR><TD align="left">    calc_withdraw_one_coin(uint256,int128)</TD></TR><TR><TD align="left">    remove_liquidity_one_coin(uint256,int128,uint256)</TD></TR><TR><TD align="left">    calc_token_amount(uint256[2],bool)</TD></TR><TR><TD align="left">    add_liquidity(uint256[2],uint256)</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR></TABLE> >];

ITri[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ITri</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    exchange(uint256,uint256,uint256,uint256,bool)</TD></TR><TR><TD align="left">    get_virtual_price()</TD></TR><TR><TD align="left">    get_dy(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    add_liquidity(uint256[3],uint256)</TD></TR><TR><TD align="left">    calc_token_amount(uint256[3],bool)</TD></TR><TR><TD align="left">    remove_liquidity_one_coin(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    calc_withdraw_one_coin(uint256,uint256)</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR></TABLE> >];

IStorageBeacon[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IStorageBeacon</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    saveUserToDetails(address,IStorageBeacon.AccountConfig)</TD></TR><TR><TD align="left">    saveTaskId(address,bytes32)</TD></TR><TR><TD align="left">    changeGasPriceBid(uint256)</TD></TR><TR><TD align="left">    addTokenToDatabase(address)</TD></TR><TR><TD align="left">    removeTokenFromDatabase(address)</TD></TR><TR><TD align="left">    storeBeacon(address)</TD></TR><TR><TD align="left">    changeEmergencyMode(IStorageBeacon.EmergencyMode)</TD></TR><TR><TD align="left">    changeEmitterStatus(bool)</TD></TR><TR><TD align="left">    storeAccountPayment(address,uint256)</TD></TR><TR><TD align="left">    addAuthorizedSelector(bytes4)</TD></TR><TR><TD align="left">    isSelectorAuthorized(bytes4)</TD></TR><TR><TD align="left">    getFixedConfig()</TD></TR><TR><TD align="left">    getGasPriceBid()</TD></TR><TR><TD align="left">    getEmergencyMode()</TD></TR><TR><TD align="left">    getAccountsByUser(address)</TD></TR><TR><TD align="left">    getTaskID(address)</TD></TR><TR><TD align="left">    getUserByAccount(address)</TD></TR><TR><TD align="left">    isUser(address)</TD></TR><TR><TD align="left">    getEmitterStatus()</TD></TR><TR><TD align="left">    getTokenDatabase()</TD></TR><TR><TD align="left">    getAccountPayments(address)</TD></TR></TABLE> >];

ozIUpgradeableBeacon[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ozIUpgradeableBeacon</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    storageBeacon(uint256)</TD></TR><TR><TD align="left">    upgradeStorageBeacon(address)</TD></TR><TR><TD align="left">    setAuth(address)</TD></TR><TR><TD align="left">    canCall(address,address,bytes4)</TD></TR></TABLE> >];

LibCommon[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>LibCommon</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    remove(address[],address)</TD></TR><TR><TD align="left">    remove(TradeOps[],TradeOps)</TD></TR></TABLE> >];

ExecutorFacetTest -> ModifiersARB;
ExecutorFacetTest[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ExecutorFacetTest</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    calculateSlippage(uint256,uint256)</TD></TR><TR><TD align="left">    executeFinalTrade(TradeOps,uint256,address,uint256)</TD></TR><TR><TD align="left">    updateExecutorState(uint256,address,uint256)</TD></TR><TR><TD align="left">    modifyPaymentsAndVolumeExternally(address,uint256,uint256)</TD></TR><TR><TD align="left">    transferUserAllocation(address,address,uint256,uint256,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _updateIndex()</TD></TR></TABLE> >];

AggregatorV3Interface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AggregatorV3Interface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    description()</TD></TR><TR><TD align="left">    version()</TD></TR><TR><TD align="left">    getRoundData(uint80)</TD></TR><TR><TD align="left">    latestRoundData()</TD></TR></TABLE> >];

Ownable -> Context;
Ownable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Ownable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transferOwnership(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _owner</TD></TR></TABLE> >];

IBeacon[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IBeacon</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    implementation()</TD></TR></TABLE> >];

UpgradeableBeacon -> IBeacon [ label="1" ];
UpgradeableBeacon -> Ownable [ label="2" ];
UpgradeableBeacon[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>UpgradeableBeacon</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    implementation()</font></TD></TR><TR><TD align="left">    upgradeTo(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _setImplementation(address)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _implementation</TD></TR></TABLE> >];

Initializable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Initializable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _isConstructor()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    initializer()</TD></TR><TR><TD align="left">    onlyInitializing()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _initialized</TD></TR><TR><TD align="left">    _initializing</TD></TR></TABLE> >];

IERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

Address[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Address</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isContract(address)</TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR><TR><TD align="left">    functionCall(address,bytes)</TD></TR><TR><TD align="left">    functionCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256,string)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResult(bool,bytes,string)</TD></TR></TABLE> >];

Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

Auth[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Auth</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    setAuthority(Authority)</TD></TR><TR><TD align="left">    setOwner(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isAuthorized(address,bytes4)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    requiresAuth()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    owner</TD></TR><TR><TD align="left">    authority<font color="blue" POINT-SIZE="10"> (Authority)</font></TD></TR></TABLE> >];

Authority[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Authority</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    canCall(address,address,bytes4)</TD></TR></TABLE> >];

RolesAuthority -> Auth [ label="1" ];
RolesAuthority -> Authority [ label="2" ];
RolesAuthority[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>RolesAuthority</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    doesUserHaveRole(address,uint8)</TD></TR><TR><TD align="left">    doesRoleHaveCapability(uint8,address,bytes4)</TD></TR><TR><TD align="left"><font color="#FFA500">    canCall(address,address,bytes4)</font></TD></TR><TR><TD align="left">    setPublicCapability(address,bytes4,bool)</TD></TR><TR><TD align="left">    setRoleCapability(uint8,address,bytes4,bool)</TD></TR><TR><TD align="left">    setUserRole(address,uint8,bool)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    getUserRoles</TD></TR><TR><TD align="left">    isCapabilityPublic</TD></TR><TR><TD align="left">    getRolesWithCapability</TD></TR></TABLE> >];

FixedPointMathLib[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>FixedPointMathLib</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    mulWadDown(uint256,uint256)</TD></TR><TR><TD align="left">    mulWadUp(uint256,uint256)</TD></TR><TR><TD align="left">    divWadDown(uint256,uint256)</TD></TR><TR><TD align="left">    divWadUp(uint256,uint256)</TD></TR><TR><TD align="left">    mulDivDown(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    mulDivUp(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    rpow(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    sqrt(uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    WAD</TD></TR></TABLE> >];

IUniswapV3SwapCallback[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV3SwapCallback</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    uniswapV3SwapCallback(int256,int256,bytes)</TD></TR></TABLE> >];

ISwapRouter -> IUniswapV3SwapCallback;
ISwapRouter[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ISwapRouter</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    exactInputSingle(ISwapRouter.ExactInputSingleParams)</TD></TR><TR><TD align="left">    exactInput(ISwapRouter.ExactInputParams)</TD></TR><TR><TD align="left">    exactOutputSingle(ISwapRouter.ExactOutputSingleParams)</TD></TR><TR><TD align="left">    exactOutput(ISwapRouter.ExactOutputParams)</TD></TR></TABLE> >];

}