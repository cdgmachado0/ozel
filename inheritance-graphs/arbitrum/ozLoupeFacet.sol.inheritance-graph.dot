digraph "" {
DiamondLoupeFacet -> IDiamondLoupe [ label="1" ];
DiamondLoupeFacet -> IERC165 [ label="2" ];
DiamondLoupeFacet[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>DiamondLoupeFacet</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    facets()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    facetFunctionSelectors(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    facetAddresses()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    facetAddress(bytes4)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR></TABLE> >];

ozLoupeFacet -> ozILoupeFacet [ label="1" ];
ozLoupeFacet -> DiamondLoupeFacet [ label="2" ];
ozLoupeFacet[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ozLoupeFacet</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    queryTokenDatabase(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getOzelIndex()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getRegulatorCounter()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getTotalVolumeInETH()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getTotalVolumeInUSD()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getAUM(int256)</font></TD></TR><TR><TD align="left">    getAUM()</TD></TR><TR><TD align="left"><font color="#FFA500">    getOzelBalances(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getProtocolFee()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getDefaultSlippage()</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _getAUM(int256)</TD></TR><TR><TD align="left">    _getUserShare(uint256,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    s</TD></TR></TABLE> >];

IMulCurv[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IMulCurv</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    exchange(int128,int128,uint256,uint256)</TD></TR><TR><TD align="left">    exchange_underlying(int128,int128,uint256,uint256)</TD></TR><TR><TD align="left">    get_dy(int128,int128,uint256)</TD></TR><TR><TD align="left">    get_dy_underlying(int128,int128,uint256)</TD></TR><TR><TD align="left">    calc_withdraw_one_coin(uint256,int128)</TD></TR><TR><TD align="left">    remove_liquidity_one_coin(uint256,int128,uint256)</TD></TR><TR><TD align="left">    calc_token_amount(uint256[2],bool)</TD></TR><TR><TD align="left">    add_liquidity(uint256[2],uint256)</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR></TABLE> >];

ITri[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ITri</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    exchange(uint256,uint256,uint256,uint256,bool)</TD></TR><TR><TD align="left">    get_virtual_price()</TD></TR><TR><TD align="left">    get_dy(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    add_liquidity(uint256[3],uint256)</TD></TR><TR><TD align="left">    calc_token_amount(uint256[3],bool)</TD></TR><TR><TD align="left">    remove_liquidity_one_coin(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    calc_withdraw_one_coin(uint256,uint256)</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR></TABLE> >];

IDiamondCut[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IDiamondCut</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    diamondCut(IDiamondCut.FacetCut[],address,bytes)</TD></TR></TABLE> >];

IDiamondLoupe[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IDiamondLoupe</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    facets()</TD></TR><TR><TD align="left">    facetFunctionSelectors(address)</TD></TR><TR><TD align="left">    facetAddresses()</TD></TR><TR><TD align="left">    facetAddress(bytes4)</TD></TR></TABLE> >];

IERC165[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC165</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    supportsInterface(bytes4)</TD></TR></TABLE> >];

IYtri[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IYtri</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    deposit(uint256)</TD></TR><TR><TD align="left">    withdraw(uint256)</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    pricePerShare()</TD></TR></TABLE> >];

ozILoupeFacet[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ozILoupeFacet</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    queryTokenDatabase(address)</TD></TR><TR><TD align="left">    getOzelIndex()</TD></TR><TR><TD align="left">    getRegulatorCounter()</TD></TR><TR><TD align="left">    getOzelBalances(address)</TD></TR><TR><TD align="left">    getTotalVolumeInETH()</TD></TR><TR><TD align="left">    getTotalVolumeInUSD()</TD></TR><TR><TD align="left">    getAUM(int256)</TD></TR><TR><TD align="left">    getProtocolFee()</TD></TR><TR><TD align="left">    getDefaultSlippage()</TD></TR></TABLE> >];

LibDiamond[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>LibDiamond</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    diamondStorage()</TD></TR><TR><TD align="left">    setContractOwner(address)</TD></TR><TR><TD align="left">    contractOwner()</TD></TR><TR><TD align="left">    enforceIsContractOwner()</TD></TR><TR><TD align="left">    diamondCut(IDiamondCut.FacetCut[],address,bytes)</TD></TR><TR><TD align="left">    addFunctions(address,bytes4[])</TD></TR><TR><TD align="left">    replaceFunctions(address,bytes4[])</TD></TR><TR><TD align="left">    removeFunctions(address,bytes4[])</TD></TR><TR><TD align="left">    addFacet(LibDiamond.DiamondStorage,address)</TD></TR><TR><TD align="left">    addFunction(LibDiamond.DiamondStorage,bytes4,uint96,address)</TD></TR><TR><TD align="left">    removeFunction(LibDiamond.DiamondStorage,address,bytes4)</TD></TR><TR><TD align="left">    initializeDiamondCut(address,bytes)</TD></TR><TR><TD align="left">    enforceHasContractCode(address,string)</TD></TR><TR><TD align="left">    callFacet(bytes)</TD></TR><TR><TD align="left">    setNonRevenueFacets(address[])</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    DIAMOND_STORAGE_POSITION</TD></TR></TABLE> >];

AggregatorV3Interface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AggregatorV3Interface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    description()</TD></TR><TR><TD align="left">    version()</TD></TR><TR><TD align="left">    getRoundData(uint80)</TD></TR><TR><TD align="left">    latestRoundData()</TD></TR></TABLE> >];

IERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

Address[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Address</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isContract(address)</TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR><TR><TD align="left">    functionCall(address,bytes)</TD></TR><TR><TD align="left">    functionCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256,string)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResult(bool,bytes,string)</TD></TR></TABLE> >];

FixedPointMathLib[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>FixedPointMathLib</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    mulWadDown(uint256,uint256)</TD></TR><TR><TD align="left">    mulWadUp(uint256,uint256)</TD></TR><TR><TD align="left">    divWadDown(uint256,uint256)</TD></TR><TR><TD align="left">    divWadUp(uint256,uint256)</TD></TR><TR><TD align="left">    mulDivDown(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    mulDivUp(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    rpow(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    sqrt(uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    WAD</TD></TR></TABLE> >];

IUniswapV3SwapCallback[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IUniswapV3SwapCallback</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    uniswapV3SwapCallback(int256,int256,bytes)</TD></TR></TABLE> >];

ISwapRouter -> IUniswapV3SwapCallback;
ISwapRouter[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ISwapRouter</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    exactInputSingle(ISwapRouter.ExactInputSingleParams)</TD></TR><TR><TD align="left">    exactInput(ISwapRouter.ExactInputParams)</TD></TR><TR><TD align="left">    exactOutputSingle(ISwapRouter.ExactOutputSingleParams)</TD></TR><TR><TD align="left">    exactOutput(ISwapRouter.ExactOutputParams)</TD></TR></TABLE> >];

}